'''
1. パスの探索
経路問題：グラフ内の2点間の経路を見つける。
サイクルの検出：グラフ内にサイクル（ループ）が存在するかを判断する。
2. 探索空間の縮小
迷路問題：迷路の出口を見つける、または迷路の最短経路を求める。
ゲームの探索：チェスや将棋などのボードゲームにおいて、可能な手を深く探索して最適な手を決定する。
3. 木構造の分析
木の探索：ディレクトリ構造やXMLドキュメントなど、木構造を持つデータの探索。
木の直径：木の最も遠い2頂点間の距離（パスの長さ）を求める。
4. グラフ理論の問題
連結成分の識別：グラフを構成する独立した連結成分を特定する。
トポロジカルソート：有向グラフにおける頂点の順序付けで、各辺が低い頂点から高い頂点へと向かうような順序。
5. 組み合わせ問題
部分集合の列挙：ある集合の全ての部分集合を列挙する。
パズルと制約充足問題：スドク、ナンプレ、クロスワードパズルの解を見つける。
6. 最適化問題
決定問題：特定の条件を満たす解が存在するかを判断する。
最適化問題：特定の条件を満たす解の中で最適なものを見つける。
'''
def dfs(graph, node, visited):
    if node not in visited:
        print(node, end=' ')
        visited.add(node)
        for neighbor in graph[node]:
            dfs(graph, neighbor, visited)

# グラフの例（辞書で表現）
graph = {
    'A' : ['B','C'],
    'B' : ['D', 'E'],
    'C' : ['F'],
    'D' : [],
    'E' : ['F'],
    'F' : []
}

visited = set() # 訪問済みのノードを記録するセット

# 'A'から探索を開始
dfs(graph, 'A', visited)
